<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="N,*{S2$CYZ/B_mNQApjK" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="9Q(,*,miKuXt#%ovFYG]" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HANSHIN_STEM_SENSORS {" line1="/**" line2=" * AIMaker STEM Sensors" line3=" */" line4="// color=190 weight=100 icon=&quot;\uf1ec&quot; block=&quot;AIMaker: UART Sensors&quot;" line5="// groups=['6-Axis Inertial Measurement Unit', 'Air Quality Sensor','TVOC Sensor','High Precision Temperature and Humidity Sensor','Laser Distance Sensor','Body Temperature Sensor','others']" line6="    let buffer = &quot;&quot;" line7="    let sensor=0" line8="    let angle_x = 0.0" line9="    let angle_y = 0.0" line10="    let angle_z = 0.0" line11="    let pm25=0" line12="    let pm10=0" line13="    let tvoc=0" line14="    let co2=0" line15="    let temperature=0.0" line16="    let humidity=0.0" line17="//     let dht11_humidity = -999.0" line18="//     let dht11_temperature = -999.0" line19="//     let dht11_readSuccessful = false" line20="    let tof_distance = 0" line21="    " line22="    export enum MODE {" line23="        //% blockId=&quot;Active&quot; block=&quot;Active&quot;" line24="        Active=0," line25="        //% blockId=&quot;Passive&quot; block=&quot;Passive&quot;" line26="        Passive=1" line27="    }" line28="" line29="    //% blockId=initSerial block=&quot;Init serial port to |TX = %Tx RX=%RX&quot;" line30="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line31="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line32="    function initSerial(Tx: SerialPin, Rx: SerialPin): void {" line33="        serial.redirect(Tx, Rx, 9600)" line34="        serial.setRxBufferSize(128)" line35="        serial.setTxBufferSize(128)" line36="        buffer = serial.readString()" line37="        basic.pause(100)" line38="        serial.writeString(&quot;CM&quot;)" line39="        basic.pause(300)" line40="        serial.readString();" line41="    }" line42="" line43="//     //% blockId=dHT11Humidity block=&quot;Humidity&quot; " line44="//     //% group=&quot;Temperature and Humidity Sensor&quot;" line45="//     export function dHT11Humidity(): number {" line46="//         return dht11_humidity;" line47="//     }" line48="    " line49="//     //% blockId=dHT11Temperature block=&quot;Temperature&quot; " line50="//     //% group=&quot;Temperature and Humidity Sensor&quot;" line51="//     export function dHT11Temperature(): number {" line52="//         return dht11_temperature;" line53="//     }" line54="" line55="//     //% block=&quot;Read Data pin $dataPin|Wait 2 sec after query $wait&quot;" line56="//     //% wait.defl=true" line57="//     //% group=&quot;Temperature and Humidity Sensor&quot;" line58="//     export function queryDHT11Data(dataPin: DigitalPin, wait: boolean) " line59="//     {" line60="//         //initialize" line61="//         let startTime: number = 0" line62="//         let endTime: number = 0" line63="//         let checksum: number = 0" line64="//         let checksumTmp: number = 0" line65="//         let dataArray: boolean[] = []" line66="//         let resultArray: number[] = []" line67="//         for (let index = 0; index &lt; 40; index++) dataArray.push(false)" line68="//         for (let index2 = 0; index2 &lt; 5; index2++) resultArray.push(0)" line69="//         dht11_humidity = -999.0" line70="//         dht11_temperature = -999.0" line71="//         dht11_readSuccessful = false" line72="" line73="//         startTime = input.runningTimeMicros()" line74="" line75="//         //request data" line76="//         pins.digitalWritePin(dataPin, 0) //begin protocol" line77="//         basic.pause(18)" line78="//        // pins.setPull(dataPin, PinPullMode.PullUp)" line79="//         pins.digitalReadPin(dataPin)" line80="//         control.waitMicros(20)" line81="//         while (pins.digitalReadPin(dataPin) == 1);" line82="//         while (pins.digitalReadPin(dataPin) == 0); //sensor response" line83="//         while (pins.digitalReadPin(dataPin) == 1); //sensor response" line84="" line85="//         //read data (5 bytes)" line86="//         for (let index3 = 0; index3 &lt; 40; index3++) {" line87="//             while (pins.digitalReadPin(dataPin) == 1);" line88="//             while (pins.digitalReadPin(dataPin) == 0);" line89="//             control.waitMicros(28)" line90="//             //if sensor pull up data pin for more than 28 us it means 1, otherwise 0" line91="//             if (pins.digitalReadPin(dataPin) == 1) dataArray[index3] = true" line92="//         }" line93="" line94="//         endTime = input.runningTimeMicros()" line95="" line96="//         //convert byte number array to integer" line97="//         for (let index4 = 0; index4 &lt; 5; index4++)" line98="//             for (let index22 = 0; index22 &lt; 8; index22++)" line99="//                 if (dataArray[8 * index4 + index22]) resultArray[index4] += 2 ** (7 - index22)" line100="" line101="//         //verify checksum" line102="//         checksumTmp = resultArray[0] + resultArray[1] + resultArray[2] + resultArray[3]" line103="//         checksum = resultArray[4]" line104="//         if (checksumTmp &gt;= 512) checksumTmp -= 512" line105="//         if (checksumTmp &gt;= 256) checksumTmp -= 256" line106="//         if (checksum == checksumTmp) dht11_readSuccessful = true" line107="" line108="//         //read data if checksum ok" line109="//         if (dht11_readSuccessful) {" line110="//             dht11_humidity = resultArray[0] + resultArray[1] / 100" line111="//             dht11_temperature = resultArray[2] + resultArray[3] / 100" line112="//         }" line113="//         //wait 2 sec after query if needed" line114="//         if (wait) basic.pause(2000)" line115="//     }" line116="" line117="    //% blockId=yawZ block=&quot;Yaw&quot; " line118="    //% group=&quot;6-Axis Inertial Measurement Unit&quot;" line119="    export function yawZ() : number {" line120="        return angle_z;" line121="    }" line122="" line123="    //% blockId=rollY block=&quot;Roll&quot; " line124="    //% group=&quot;6-Axis Inertial Measurement Unit&quot;" line125="    export function rollY() : number {" line126="        return angle_y;" line127="    }" line128="" line129="    //% blockId=pitchX block=&quot;Pitch&quot; " line130="    //% group=&quot;6-Axis Inertial Measurement Unit&quot;" line131="    export function pitchX() : number {" line132="        return angle_x;" line133="    }" line134="    " line135="    //% blockId=queryGyroData block=&quot;Read gyro data&quot; " line136="    //% group=&quot;6-Axis Inertial Measurement Unit&quot;" line137="    export function queryGyroData() : void {" line138="        sensor = 2" line139="        serial.writeString(&quot;CM+D08U&quot;)" line140="        basic.pause(100)" line141="    }" line142="    //% blockId=setGyroModel block=&quot;Set Gyro Model to |mode=%mode active interval time=%activeInterval second at serial TX=%Tx Rx=%Rx&quot;" line143="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line144="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line145="    //% group=&quot;6-Axis Inertial Measurement Unit&quot;" line146="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line147="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line148="    //% blockExternalInputs=true" line149="    export function setGyroModel(mode: MODE, activeInterval: number,Tx: SerialPin, Rx: SerialPin) : void {" line150="        sensor = 2" line151="        initSerial(Tx,Rx)" line152="        if( mode === MODE.Active ) {" line153="            let modeCmd22= &quot;CM+D08U=&quot;+activeInterval" line154="            serial.writeString(modeCmd22)" line155="        }" line156="        else {" line157="            serial.writeString(&quot;CM+D08U&quot;)" line158="        }" line159="        basic.pause(100)" line160="    }" line161="   " line162="    //% blockId=pM25 block=&quot;PM2.5&quot; " line163="    //% group=&quot;Air Quality Sensor&quot;" line164="    export function pM25(): number {" line165="        return pm25;" line166="    }" line167="" line168="    //% blockId=pM10 block=&quot;PM10&quot; " line169="    //% group=&quot;Air Quality Sensor&quot;" line170="    export function pM10(): number {" line171="        return pm10;" line172="    }" line173="    " line174="    //% blockId=queryPMT7Data block=&quot;Read Air Quality data&quot; " line175="    //% group=&quot;Air Quality Sensor&quot;" line176="    export function queryPMT7Data() : void {" line177="        sensor = 3" line178="        serial.writeString(&quot;CM+D11U&quot;)" line179="        basic.pause(100)" line180="    }" line181="" line182="    //% blockId=setPM_T7Model block=&quot;Set PM_T7 Model to |mode=%mode active interval time=%activeInterval second at serial TX=%Tx Rx=%Rx&quot;" line183="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line184="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line185="    //% group=&quot;Air Quality Sensor&quot;" line186="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line187="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line188="    //% blockExternalInputs=true" line189="    export function setPMT7Model(mode: MODE, activeInterval: number,Tx: SerialPin, Rx: SerialPin) : void {" line190="        sensor = 3" line191="        initSerial(Tx,Rx)" line192="        if( mode === MODE.Active ) {" line193="            let modeCmd3= &quot;CM+D11U=&quot;+activeInterval" line194="            serial.writeString(modeCmd3)" line195="        }" line196="        else {" line197="            serial.writeString(&quot;CM+D11U&quot;)" line198="        }" line199="        basic.pause(100)" line200="    }" line201="" line202="    //% blockId=tVOC block=&quot;TVOC&quot; " line203="    //% group=&quot;TVOC Sensor&quot;" line204="    export function tVOC(): number {" line205="        return tvoc;" line206="    }" line207="" line208="    //% blockId=cO2 block=&quot;CO2&quot; " line209="    //% group=&quot;TVOC Sensor&quot;" line210="    export function cO2(): number {" line211="        return co2;" line212="    }" line213="" line214="    //% blockId=querySGP30Data block=&quot;Read SGP30 data&quot; " line215="    //% group=&quot;TVOC Sensor&quot;" line216="    export function querySGP30Data() : void {" line217="        sensor = 4" line218="        serial.writeString(&quot;CM+D10U&quot;)" line219="        basic.pause(100)" line220="    }" line221="    //% blockId=setSGP30Model block=&quot;Set SGP30 Model to |mode=%mode active interval time=%activeInterval second at serial TX=%Tx Rx=%Rx&quot;" line222="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line223="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line224="    //% group=&quot;TVOC Sensor&quot;" line225="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line226="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line227="    //% blockExternalInputs=true" line228="    export function setSGP30Model(mode: MODE, activeInterval: number,Tx: SerialPin, Rx: SerialPin) : void {" line229="        sensor = 4" line230="        initSerial(Tx,Rx)" line231="        if( mode === MODE.Active ) {" line232="            let modeCmd4= &quot;CM+D10U=&quot;+activeInterval" line233="            serial.writeString(modeCmd4)" line234="        }" line235="        else {" line236="            serial.writeString(&quot;CM+D10U&quot;)" line237="        }" line238="        basic.pause(100)" line239="    }" line240="    " line241="    //% blockId=temperatureValue block=&quot;Temperature&quot; " line242="    //% group=&quot;High Precision Temperature and Humidity Sensor&quot;" line243="    export function temperatureValue(): number {" line244="        return temperature;" line245="    }" line246="" line247="    //% blockId=humidityValue block=&quot;Humidity&quot; " line248="    //% group=&quot;High Precision Temperature and Humidity Sensor&quot;" line249="    export function humidityValue(): number {" line250="        return humidity;" line251="    }" line252="" line253="    " line254="" line255="" line256="    //% blockId=querySHTX31Data block=&quot;Read SHT31X data&quot; " line257="    //% group=&quot;High Precision Temperature and Humidity Sensor&quot;" line258="    export function querySHTX31Data() : void {" line259="        sensor = 5" line260="        serial.writeString(&quot;CM+D09U&quot;)" line261="        basic.pause(100)" line262="    }" line263="   " line264="    //% blockId=setSHT31XModel block=&quot;Set SHT31X Model to |mode=%mode active interval time=%activeInterval second at serial TX=%Tx Rx=%Rx&quot;" line265="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line266="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line267="    //% group=&quot;High Precision Temperature and Humidity Sensor&quot;" line268="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line269="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line270="    //% blockExternalInputs=true" line271="    export function setSHTX31Model(mode: MODE, activeInterval: number,Tx: SerialPin, Rx: SerialPin) : void {" line272="        sensor = 5" line273="        initSerial(Tx,Rx)" line274="        if( mode === MODE.Active ) {" line275="            let modeCmd5= &quot;CM+D09U=&quot;+activeInterval" line276="            serial.writeString(modeCmd5)" line277="            basic.pause(150)" line278="            serial.writeString(modeCmd5)" line279="        }" line280="        else {" line281="            serial.writeString(&quot;CM+D09U&quot;)" line282="        }" line283="        basic.pause(100)" line284="    }" line285="" line286="    //% blockId=tofDistanceValue block=&quot;Distance&quot; " line287="    //% group=&quot;Laser Distance Sensor&quot;" line288="    export function tofDistanceValue(): number {" line289="        return tof_distance;" line290="    }    " line291="    //% blockId=queryTOFData block=&quot;Read distance(mm)&quot; " line292="    //% group=&quot;Laser Distance Sensor&quot;" line293="    export function queryTOFData(): void {" line294="        sensor = 6" line295="        serial.writeString(&quot;CM+D12U&quot;)" line296="        basic.pause(100)" line297="    }" line298="" line299="    //% blockId=setTOFMode block=&quot;Set laser distance sensor Model to |mode=%mode active interval time=%activeInterval second at serial TX=%Tx Rx=%Rx&quot;" line300="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line301="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line302="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line303="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line304="    //% group=&quot;Laser Distance Sensor&quot;" line305="    //% blockExternalInputs=true" line306="    export function setTOFMode(mode: MODE, activeInterval: number,Tx: SerialPin, Rx: SerialPin) : void {" line307="        sensor = 6" line308="        initSerial(Tx,Rx)" line309="        if( mode === MODE.Active ) {" line310="            let modeCmd= &quot;CM+D12U=&quot;+activeInterval" line311="            serial.writeString(modeCmd)" line312="        }" line313="        else {" line314="            serial.writeString(&quot;CM+D12U&quot;)" line315="        }" line316="        basic.pause(100)" line317="    }" line318="" line319="    let mlxTempture = 0" line320="    //% blockId=mlx90614Temperature block=&quot;Temperature&quot; " line321="    //% group=&quot;Body Temperature Sensor&quot;" line322="    export function mlx90614Temperature(): number {" line323="        return mlxTempture;" line324="    }" line325="" line326="    //% blockId=queryMLX90614Data block=&quot;Read temperature&quot; " line327="    //% group=&quot;Body Temperature Sensor&quot;" line328="    export function queryMLX90614Data(): void {" line329="        sensor = 7" line330="        serial.writeString(&quot;CM+D05U&quot;)" line331="        basic.pause(100)" line332="    }" line333="" line334="    //% blockId=setMLX90614Mode block=&quot;Set sensor Model to |mode=%mode active interval time=%activeInterval second at serial TX=%Tx Rx=%Rx&quot;" line335="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line336="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line337="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line338="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line339="    //% group=&quot;Body Temperature Sensor&quot;" line340="    //% blockExternalInputs=true" line341="    export function setMLX90614Mode(mode: MODE, activeInterval: number,Tx: SerialPin, Rx: SerialPin) : void {" line342="        sensor = 7" line343="        initSerial(Tx,Rx)" line344="        if( mode === MODE.Active ) {" line345="            let modeCmd2= &quot;CM+D05U=&quot;+activeInterval" line346="            serial.writeString(modeCmd2)" line347="        }" line348="        else {" line349="            serial.writeString(&quot;CM+D05U&quot;)" line350="        }" line351="        basic.pause(100)" line352="    }" line353="" line354="    //% blockId=setWifiInfo block=&quot;Connect to WIFI, |SSID=%name Password=%password at serial TX=%Tx Rx=%Rx&quot;" line355="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line356="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line357="    //% group=&quot;IOT&quot;" line358="    export function setWifiInfo(name: string, password: string,Tx: SerialPin, Rx: SerialPin): void {" line359="        initSerial(Tx,Rx)" line360="        serial.writeString(&quot;AT+CWMODE=3&quot;)" line361="        basic.pause(300)        " line362="        let cmdwifi = &quot;AT+CWJAP=\&quot;&quot; + name + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;" line363="        serial.writeString(cmdwifi)" line364="        basic.pause(10000)" line365="    }" line366="" line367="    //% blockId=TriggerEvent block=&quot;Trigger event, |key=%key event=%event&quot;" line368="    //% group=&quot;IOT&quot;" line369="    export function triggerEvent(key: string, event: string): void {" line370="        let cmd2 = &quot;https://maker.ifttt.com/trigger/&quot; + event + &quot;/with/key/&quot; + key" line371="        serial.writeString(cmd2)" line372="        basic.pause(100)" line373="    }" line374="    " line375="    //% blockId=triggerThingSpeakEvent block=&quot;Trigger thing speak event, |key=%key field=%field value=%value&quot;" line376="    //% field.min=1 field.defl=1" line377="    //% group=&quot;IOT&quot;" line378="    export function triggerThingSpeakEvent(key: string, field:number, value: string): void {" line379="        let cmd22 = &quot;https://api.thingspeak.com/update?api_key=&quot; + key + &quot;&amp;field&quot; + field +&quot;=&quot; + value" line380="        serial.writeString(cmd22)" line381="        basic.pause(100)" line382="    }" line383="" line384="" line385="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line386="        let line = serial.readLine() " line387="        if( line.length &lt;= 1 )" line388="            return ;" line389="        let h0 = line.substr(0,1)" line390="        sensor = 100" line391="        if( h0 == &quot;A&quot; )" line392="        {" line393="            h0 = line.substr(0,2)" line394="            if( h0 == &quot;AT&quot; )" line395="            {" line396="                sensor = 100" line397="            }" line398="            else if( line.length == 18 )" line399="            {" line400="                sensor=2" line401="                line = line.substr(1)" line402="            }" line403="        } else if( h0 == &quot;B&quot; )" line404="        {" line405="            //sensor=2" line406="            //line = line.substr(1)" line407="        } else if( h0== &quot;C&quot; &amp;&amp; line.length == 9 )" line408="        {            " line409="            sensor=3" line410="            line = line.substr(1)" line411="        }else if( h0== &quot;D&quot; &amp;&amp; line.length == 11)" line412="        {" line413="            sensor=4" line414="            line = line.substr(1)" line415="        }else if( h0== &quot;E&quot; &amp;&amp; line.length == 12 )" line416="        {" line417="            sensor=5" line418="            line = line.substr(1)" line419="        }else if( h0== &quot;F&quot; &amp;&amp; line.length == 7 )" line420="        {" line421="            sensor=7" line422="            line = line.substr(1)" line423="        }else if( h0== &quot;G&quot; &amp;&amp; line.length == 5 )" line424="        {" line425="            sensor=6" line426="            line = line.substr(1)" line427="        }" line428="        else" line429="        {" line430="            sensor=100" line431="        }" line432="" line433="        switch( sensor ) {" line434="            default:" line435="                break;" line436="            case 1: // MPU6050" line437="            {" line438="                // acc_x= parseInt(line.substr(1,5))" line439="                // if( line.substr(0,1) === &quot;-&quot;)" line440="                //     acc_x *= -1" line441="                // acc_y= parseInt(line.substr(7,5))" line442="                // if( line.substr(6,1) === &quot;-&quot;)" line443="                //     acc_y *= -1" line444="                // acc_z= parseInt(line.substr(13,5))" line445="                // if( line.substr(12,1) === &quot;-&quot;)" line446="                //     acc_z *= -1" line447="" line448="                // let g = 9.8" line449="                // acc_x = 2*g * acc_x / 32768" line450="                // acc_y = 2*g * acc_y / 32768" line451="                // acc_z = 2*g * acc_z / 32768" line452="" line453="                // acc_x = Math.floor(1000*acc_x) / 1000" line454="                // acc_y = Math.floor(1000*acc_y) / 1000" line455="                // acc_z = Math.floor(1000*acc_z) / 1000  " line456="            }" line457="                break;" line458="            case 2: // Gyro" line459="            {" line460="                angle_x = parseFloat(line.substr(1,4))" line461="                if( line.substr(0,1) === &quot;-&quot;)" line462="                    angle_x *= -1" line463="                    " line464="                angle_y = parseFloat(line.substr(6,5))" line465="                if( line.substr(5,1) === &quot;-&quot;)" line466="                    angle_y *= -1" line467="" line468="                angle_z = parseFloat(line.substr(12,5))" line469="                if( line.substr(11,1) === &quot;-&quot;)" line470="                    angle_z *= -1" line471="                // Gyro_x= parseInt(line.substr(1,5))" line472="                // if( line.substr(0,1) === &quot;-&quot;)" line473="                //     Gyro_x *= -1" line474="                // Gyro_y= parseInt(line.substr(7,5))" line475="                // if( line.substr(6,1) === &quot;-&quot;)" line476="                //     Gyro_y *= -1" line477="                // Gyro_z= parseInt(line.substr(13,5))" line478="                // if( line.substr(12,1) === &quot;-&quot;)" line479="                //     Gyro_z *= -1" line480="                " line481="                // Gyro_x = 1000 * Gyro_x / 32768" line482="                // Gyro_y = 1000 * Gyro_y / 32768" line483="                // Gyro_z = 1000 * Gyro_z / 32768" line484="                " line485="                // Gyro_x = Math.floor(100*Gyro_x) / 100" line486="                // Gyro_y = Math.floor(100*Gyro_y) / 100" line487="                // Gyro_z = Math.floor(100*Gyro_z) / 100                " line488="            }" line489="                break;" line490="            case 3: // PM_T7" line491="            {" line492="                pm25 = parseInt(line.substr(0,4))" line493="                pm10 = parseInt(line.substr(-4,4))" line494="            }" line495="                break;" line496="            case 4: // SGP30 " line497="            {" line498="                tvoc = parseInt(line.substr(0,5))" line499="                co2 = parseInt(line.substr(-5,5))" line500="            }" line501="                break;" line502="            case 5: // SHT31 " line503="            {" line504="                temperature = parseFloat(line.substr(1,5))" line505="                if(line.substr(0,1) === &quot;-&quot; )" line506="                    temperature *= -1" line507="                humidity = parseFloat(line.substr(-5,5))" line508="" line509="                //basic.showNumber(temperature)" line510="            }" line511="                break;" line512="            case 6: // TOF" line513="            {" line514="                tof_distance = parseInt(line)" line515="            }" line516="            break;" line517="            case 7: //MLX90614" line518="            {" line519="                mlxTempture = parseFloat(line.substr(1,5))" line520="                if(line.substr(0,1) === &quot;-&quot; )" line521="                    mlxTempture *= -1" line522="            }" line523="            break;" line524="        }" line525="    })" line526="}" numlines="527"></mutation></block></statement></block></xml>