<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="M@JTG[Y9mrbkN8@VOEVJ" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="|wIEOjL3kvw6|M{iV,.}" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HANSHIN_STEM_SENSORS {" line1="    let buffer = &quot;&quot;" line2="    let sensor=0" line3="    let MPU6050_x=0" line4="    let MPU6050_y=0" line5="    let MPU6050_z=0" line6="    let Gyro_x=0" line7="    let Gyro_y=0" line8="    let Gyro_z=0" line9="    let pm25=0" line10="    let pm10=0" line11="    let tvoc=0" line12="    let co2=0" line13="    let temperature=0.0" line14="    let humidity=0.0" line15="    let dht11_humidity = -999.0" line16="    let dht11_temperature = -999.0" line17="    let dht11_readSuccessful = false" line18="    " line19="    export enum MODE {" line20="        //% blockId=&quot;Active&quot; block=&quot;Active&quot;" line21="        Active=0," line22="        //% blockId=&quot;Passive&quot; block=&quot;Passive&quot;" line23="        Passive=1" line24="    }" line25="" line26="    //% blockId=mpu6050X block=&quot;Get MPU6050 X&quot; " line27="    export function mpu6050X() : number {" line28="        return MPU6050_x;" line29="    }" line30="" line31="    //% blockId=mpu6050Y block=&quot;Get MPU6050 Y&quot; " line32="    export function mpu6050Y() : number {" line33="        return MPU6050_y;" line34="    }" line35="" line36="    //% blockId=mpu6050Z block=&quot;Get MPU6050 Z&quot; " line37="    export function mpu6050Z() : number {" line38="        return MPU6050_z;" line39="    }" line40="" line41="    //% blockId=gyroX block=&quot;Get Gyro X&quot; " line42="    export function gyroX() : number {" line43="        return Gyro_x;" line44="    }" line45="" line46="    //% blockId=gyroY block=&quot;Get Gyro Y&quot; " line47="    export function gyroY() : number {" line48="        return Gyro_y;" line49="    }" line50="" line51="    //% blockId=gyroZ block=&quot;Get Gyro Z&quot; " line52="    export function gyroZ() : number {" line53="        return Gyro_z;" line54="    }" line55="" line56="    //% blockId=pM25 block=&quot;Get PM25&quot; " line57="    export function pM25(): number {" line58="        return pm25;" line59="    }" line60="" line61="    //% blockId=pM10 block=&quot;Get PM10&quot; " line62="    export function pM10(): number {" line63="        return pm10;" line64="    }" line65="" line66="    //% blockId=tVOC block=&quot;Get TVOC&quot; " line67="    export function tVOC(): number {" line68="        return tvoc;" line69="    }" line70="" line71="    //% blockId=cO2 block=&quot;Get CO2&quot; " line72="    export function cO2(): number {" line73="        return co2;" line74="    }" line75="" line76="    //% blockId=temperatureValue block=&quot;Get temperature&quot; " line77="    export function temperatureValue(): number {" line78="        return temperature;" line79="    }" line80="" line81="    //% blockId=humidityValue block=&quot;Get humidity&quot; " line82="    export function humidityValue(): number {" line83="        return humidity;" line84="    }" line85="" line86="    //% blockId=initSerial block=&quot;Init serial port to |TX = %Tx RX=%RX&quot;" line87="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line88="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line89="    export function initSerial(Tx: SerialPin, Rx: SerialPin): void {" line90="        serial.redirect(Tx, Rx, 9600)" line91="        buffer = serial.readString()" line92="        basic.pause(100)" line93="        serial.writeString(&quot;AT&quot;)" line94="        basic.pause(300)" line95="        serial.readString();" line96="    }" line97="" line98="    //% blockId=setMPU6050Model block=&quot;Set MPU6050 Model to |mode=%mode active interval time=%activeInterval second&quot;" line99="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line100="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line101="    export function setMPU6050Model(mode: MODE, activeInterval: number) : void {" line102="        sensor = 1" line103="        if( mode === MODE.Active ) {" line104="            let modeCmd= &quot;AT+SPMODE=&quot;+activeInterval" line105="            serial.writeString(modeCmd)" line106="        }" line107="        else {" line108="            serial.writeString(&quot;AT+SPDATA&quot;)" line109="        }" line110="    }" line111="" line112="    //% blockId=queryMPU6050Data block=&quot;Query MPU6050 data&quot; " line113="    export function queryMPU6050Data(): void {" line114="        sensor = 1" line115="        serial.writeString(&quot;AT+SPDATA&quot;)" line116="    }" line117="" line118="    //% blockId=setGyroModel block=&quot;Set Gyro Model to |mode=%mode active interval time=%activeInterval second&quot;" line119="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line120="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line121="    export function setGyroModel(mode: MODE, activeInterval: number) : void {" line122="        sensor = 2" line123="        if( mode === MODE.Active ) {" line124="            let modeCmd2= &quot;AT+GYMODE=&quot;+activeInterval" line125="            serial.writeString(modeCmd2)" line126="        }" line127="        else {" line128="            serial.writeString(&quot;AT+GYDATA&quot;)" line129="        }" line130="    }" line131="" line132="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line133="    export function queryGyroData() : void {" line134="        sensor = 2" line135="        serial.writeString(&quot;AT+GYDATA&quot;)" line136="    }" line137="" line138="    //% blockId=setPM_T7Model block=&quot;Set PM_T7 Model to |mode=%mode active interval time=%activeInterval second&quot;" line139="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line140="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line141="    export function setPMT7Model(mode: MODE, activeInterval: number) : void {" line142="        sensor = 3" line143="        if( mode === MODE.Active ) {" line144="            let modeCmd3= &quot;AT+MODE=&quot;+activeInterval" line145="            serial.writeString(modeCmd3)" line146="        }" line147="        else {" line148="            serial.writeString(&quot;AT+DATA&quot;)" line149="        }" line150="    }" line151="" line152="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line153="    export function queryPMT7Data() : void {" line154="        sensor = 3" line155="        serial.writeString(&quot;AT+DATA&quot;)" line156="    }" line157="" line158="    //% blockId=setSGP30Model block=&quot;Set SGP30 Model to |mode=%mode active interval time=%activeInterval second&quot;" line159="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line160="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line161="    export function setSGP30Model(mode: MODE, activeInterval: number) : void {" line162="        sensor = 4" line163="        if( mode === MODE.Active ) {" line164="            let modeCmd4= &quot;AT+MODE=&quot;+activeInterval" line165="            serial.writeString(modeCmd4)" line166="        }" line167="        else {" line168="            serial.writeString(&quot;AT+DATA&quot;)" line169="        }" line170="    }" line171="    " line172="    //% blockId=querySGP30Data block=&quot;Query SGP30 data&quot; " line173="    export function querySGP30Data() : void {" line174="        sensor = 4" line175="        serial.writeString(&quot;AT+DATA&quot;)" line176="    }" line177="" line178="    //% blockId=setSHT31Model block=&quot;Set SHT31 Model to |mode=%mode active interval time=%activeInterval second&quot;" line179="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line180="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line181="    export function setSHT31Model(mode: MODE, activeInterval: number) : void {" line182="        sensor = 5" line183="        if( mode === MODE.Active ) {" line184="            let modeCmd5= &quot;AT+MODE=&quot;+activeInterval" line185="            serial.writeString(modeCmd5)" line186="        }" line187="        else {" line188="            serial.writeString(&quot;AT+DATA&quot;)" line189="        }" line190="    }" line191="" line192="    //% blockId=querySHT31Data block=&quot;Query SHT31 data&quot; " line193="    export function querySHT31Data() : void {" line194="        sensor = 5" line195="        serial.writeString(&quot;AT+DATA&quot;)" line196="    }" line197="" line198="    //% block=&quot;Query DHT11 Data pin $dataPin|Wait 2 sec after query $wait&quot;" line199="    //% wait.defl=true" line200="    export function queryDHT11Data(dataPin: DigitalPin, wait: boolean) " line201="    {" line202="        //initialize" line203="        let startTime: number = 0" line204="        let endTime: number = 0" line205="        let checksum: number = 0" line206="        let checksumTmp: number = 0" line207="        let dataArray: boolean[] = []" line208="        let resultArray: number[] = []" line209="        for (let index = 0; index &lt; 40; index++) dataArray.push(false)" line210="        for (let index2 = 0; index2 &lt; 5; index2++) resultArray.push(0)" line211="        dht11_humidity = -999.0" line212="        dht11_temperature = -999.0" line213="        dht11_readSuccessful = false" line214="" line215="        startTime = input.runningTimeMicros()" line216="0" line217="        //request data" line218="        pins.digitalWritePin(dataPin, 0) //begin protocol" line219="        basic.pause(18)" line220="       // pins.setPull(dataPin, PinPullMode.PullUp)" line221="        pins.digitalReadPin(dataPin)" line222="        control.waitMicros(20)" line223="        while (pins.digitalReadPin(dataPin) == 1);" line224="        while (pins.digitalReadPin(dataPin) == 0); //sensor response" line225="        while (pins.digitalReadPin(dataPin) == 1); //sensor response" line226="" line227="        //read data (5 bytes)" line228="        for (let index3 = 0; index3 &lt; 40; index3++) {" line229="            while (pins.digitalReadPin(dataPin) == 1);" line230="            while (pins.digitalReadPin(dataPin) == 0);" line231="            control.waitMicros(28)" line232="            //if sensor pull up data pin for more than 28 us it means 1, otherwise 0" line233="            if (pins.digitalReadPin(dataPin) == 1) dataArray[index3] = true" line234="        }" line235="" line236="        endTime = input.runningTimeMicros()" line237="" line238="        //convert byte number array to integer" line239="        for (let index4 = 0; index4 &lt; 5; index4++)" line240="            for (let index22 = 0; index22 &lt; 8; index22++)" line241="                if (dataArray[8 * index4 + index22]) resultArray[index4] += 2 ** (7 - index22)" line242="" line243="        //verify checksum" line244="        checksumTmp = resultArray[0] + resultArray[1] + resultArray[2] + resultArray[3]" line245="        checksum = resultArray[4]" line246="        if (checksumTmp &gt;= 512) checksumTmp -= 512" line247="        if (checksumTmp &gt;= 256) checksumTmp -= 256" line248="        if (checksum == checksumTmp) dht11_readSuccessful = true" line249="" line250="        //read data if checksum ok" line251="        if (dht11_readSuccessful) {" line252="            dht11_humidity = resultArray[0] + resultArray[1] / 100" line253="            dht11_temperature = resultArray[2] + resultArray[3] / 100" line254="        }" line255="        //wait 2 sec after query if needed" line256="        if (wait) basic.pause(2000)" line257="    }" line258="" line259="    //% blockId=dHT11Humidity block=&quot;Get DHT11 humidity&quot; " line260="    export function dHT11Humidity(): number {" line261="        return dht11_humidity;" line262="    }" line263="    " line264="    //% blockId=dHT11Temperature block=&quot;Get DHT11 temperature&quot; " line265="    export function dHT11Temperature(): number {" line266="        return dht11_temperature;" line267="    }" line268="" line269="    let line = &quot;&quot;" line270="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line271="        line = serial.readLine()       " line272="        switch( sensor ) {" line273="            default:" line274="                break;" line275="            case 1: // MPU6050" line276="            {" line277="                MPU6050_x= parseInt(line.substr(1,5))" line278="                if( line.substr(0,1) === &quot;-&quot;)" line279="                    MPU6050_x *= -1" line280="                MPU6050_y= parseInt(line.substr(7,5))" line281="                if( line.substr(6,1) === &quot;-&quot;)" line282="                    MPU6050_y *= -1" line283="                MPU6050_z= parseInt(line.substr(13,5))" line284="                if( line.substr(12,1) === &quot;-&quot;)" line285="                    MPU6050_z *= -1" line286="            }" line287="                break;" line288="            case 2: // Gyro" line289="            {" line290="                Gyro_x= parseInt(line.substr(1,5))" line291="                if( line.substr(0,1) === &quot;-&quot;)" line292="                    Gyro_x *= -1" line293="                Gyro_y= parseInt(line.substr(7,5))" line294="                if( line.substr(6,1) === &quot;-&quot;)" line295="                    Gyro_y *= -1" line296="                Gyro_z= parseInt(line.substr(13,5))" line297="                if( line.substr(12,1) === &quot;-&quot;)" line298="                    Gyro_z *= -1" line299="            }" line300="                break;" line301="            case 3: // PM_T7" line302="            {" line303="                pm25 = parseInt(line.substr(0,4))" line304="                pm10 = parseInt(line.substr(-4,4))" line305="            }" line306="                break;" line307="            case 4: // SGP30 " line308="            {" line309="                tvoc = parseInt(line.substr(0,5))" line310="                co2 = parseInt(line.substr(-5,5))" line311="            }" line312="                break;" line313="            case 5: // SHT31 " line314="            {" line315="                temperature = parseFloat(line.substr(1,5))" line316="                if(line.substr(0,1) === &quot;-&quot; )" line317="                    temperature *= -1" line318="                humidity = parseFloat(line.substr(-5,5))" line319="" line320="                //basic.showNumber(temperature)" line321="            }" line322="                break;" line323="        }" line324="    })" line325="}" numlines="326"></mutation></block></statement></block></xml>