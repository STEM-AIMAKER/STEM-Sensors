<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="^h;xS=cL6CSj~CnIfjVv" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=":-:G]`boc6n`M5sO~KwP" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HANSHIN_STEM_SENSORS {" line1="/**" line2=" * Hanshin STEM Sensors" line3=" */" line4="// color=190 weight=100 icon=&quot;\uf1ec&quot; block=&quot;Hanshin STEM Sensors&quot;" line5="// groups=['DHT11', 'Gyroscope+Accelerometer','MPU6050', 'PM2.5','SHT31X','SGP30','Time of Flight(TOF)','others']" line6="" line7="    let buffer = &quot;&quot;" line8="    let sensor=0" line9="    let MPU6050_x=0" line10="    let MPU6050_y=0" line11="    let MPU6050_z=0" line12="    let Gyro_x=0" line13="    let Gyro_y=0" line14="    let Gyro_z=0" line15="    let pm25=0" line16="    let pm10=0" line17="    let tvoc=0" line18="    let co2=0" line19="    let temperature=0.0" line20="    let humidity=0.0" line21="    let dht11_humidity = -999.0" line22="    let dht11_temperature = -999.0" line23="    let dht11_readSuccessful = false" line24="    let tof_distance = 0" line25="    " line26="    export enum MODE {" line27="        //% blockId=&quot;Active&quot; block=&quot;Active&quot;" line28="        Active=0," line29="        //% blockId=&quot;Passive&quot; block=&quot;Passive&quot;" line30="        Passive=1" line31="    }" line32="" line33="    //% blockId=mpu6050X block=&quot;Get MPU6050 X&quot; " line34="    //% group=&quot;MPU6050&quot;" line35="    export function mpu6050X() : number {" line36="        return MPU6050_x;" line37="    }" line38="" line39="    //% blockId=mpu6050Y block=&quot;Get MPU6050 Y&quot; " line40="    //% group=&quot;MPU6050&quot;" line41="    export function mpu6050Y() : number {" line42="        return MPU6050_y;" line43="    }" line44="" line45="    //% blockId=mpu6050Z block=&quot;Get MPU6050 Z&quot; " line46="    //% group=&quot;MPU6050&quot;" line47="    export function mpu6050Z() : number {" line48="        return MPU6050_z;" line49="    }" line50="" line51="    //% blockId=gyroX block=&quot;Get Gyro X&quot; " line52="    //% group=&quot;Gyroscope+Accelerometer&quot;" line53="    export function gyroX() : number {" line54="        return Gyro_x;" line55="    }" line56="" line57="    //% blockId=gyroY block=&quot;Get Gyro Y&quot; " line58="    //% group=&quot;Gyroscope+Accelerometer&quot;" line59="    export function gyroY() : number {" line60="        return Gyro_y;" line61="    }" line62="" line63="    //% blockId=gyroZ block=&quot;Get Gyro Z&quot; " line64="    //% group=&quot;Gyroscope+Accelerometer&quot;" line65="    export function gyroZ() : number {" line66="        return Gyro_z;" line67="    }" line68="" line69="    //% blockId=pM25 block=&quot;Get PM25&quot; " line70="    //% group=&quot;PM2.5&quot;" line71="    export function pM25(): number {" line72="        return pm25;" line73="    }" line74="" line75="    //% blockId=pM10 block=&quot;Get PM10&quot; " line76="    //% group=&quot;PM2.5&quot;" line77="    export function pM10(): number {" line78="        return pm10;" line79="    }" line80="" line81="    //% blockId=tVOC block=&quot;Get TVOC&quot; " line82="    //% group=&quot;SGP30&quot;" line83="    export function tVOC(): number {" line84="        return tvoc;" line85="    }" line86="" line87="    //% blockId=cO2 block=&quot;Get CO2&quot; " line88="    //% group=&quot;SGP30&quot;" line89="    export function cO2(): number {" line90="        return co2;" line91="    }" line92="" line93="    //% blockId=temperatureValue block=&quot;Get temperature&quot; " line94="    //% group=&quot;SHT31X&quot;" line95="    export function temperatureValue(): number {" line96="        return temperature;" line97="    }" line98="" line99="    //% blockId=humidityValue block=&quot;Get humidity&quot; " line100="    //% group=&quot;SHT31X&quot;" line101="    export function humidityValue(): number {" line102="        return humidity;" line103="    }" line104="" line105="    //% blockId=tofDistanceValue block=&quot;Get TOF Distance&quot; " line106="    //% group=&quot;Time of Flight(TOF)&quot;" line107="    export function tofDistanceValue(): number {" line108="        return tof_distance;" line109="    }    " line110="" line111="    //% blockId=initSerial block=&quot;Init serial port to |TX = %Tx RX=%RX&quot;" line112="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line113="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line114="    function initSerial(Tx: SerialPin, Rx: SerialPin): void {" line115="        serial.redirect(Tx, Rx, 9600)" line116="        buffer = serial.readString()" line117="        basic.pause(100)" line118="        serial.writeString(&quot;AT&quot;)" line119="        basic.pause(300)" line120="        serial.readString();" line121="    }" line122="" line123="    //% blockId=setTOFMode block=&quot;Set TOF Model to |mode=%mode active interval time=%activeInterval second at serial TX=%Tx Rx=%Rx&quot;" line124="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line125="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line126="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line127="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line128="    //% group=&quot;Time of Flight(TOF)&quot;" line129="    //% blockExternalInputs=true" line130="    export function setTOFMode(mode: MODE, activeInterval: number,Tx: SerialPin, Rx: SerialPin) : void {" line131="        sensor = 6" line132="        initSerial(Tx,Rx)" line133="        if( mode === MODE.Active ) {" line134="            let modeCmd= &quot;AT+MODE=&quot;+activeInterval" line135="            serial.writeString(modeCmd)" line136="        }" line137="        else {" line138="            serial.writeString(&quot;AT+DATA&quot;)" line139="        }" line140="    }" line141="" line142="    //% blockId=queryTOFData block=&quot;Query TOF data(mm)&quot; " line143="    //% group=&quot;Time of Flight(TOF)&quot;" line144="    export function queryTOFData(): void {" line145="        sensor = 6" line146="        serial.writeString(&quot;AT+DATA&quot;)" line147="    }" line148="" line149="    //% blockId=setMPU6050Model block=&quot;Set MPU6050 Model to |mode=%mode active interval time=%activeInterval second&quot;" line150="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line151="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line152="    //% group=&quot;MPU6050&quot;" line153="    export function setMPU6050Model(mode: MODE, activeInterval: number) : void {" line154="        sensor = 1" line155="        if( mode === MODE.Active ) {" line156="            let modeCmd2= &quot;AT+SPMODE=&quot;+activeInterval" line157="            serial.writeString(modeCmd2)" line158="        }" line159="        else {" line160="            serial.writeString(&quot;AT+SPDATA&quot;)" line161="        }" line162="    }" line163="" line164="    //% blockId=queryMPU6050Data block=&quot;Query MPU6050 data&quot; " line165="    //% group=&quot;MPU6050&quot;" line166="    export function queryMPU6050Data(): void {" line167="        sensor = 1" line168="        serial.writeString(&quot;AT+SPDATA&quot;)" line169="    }" line170="" line171="    //% blockId=setGyroModel block=&quot;Set Gyro Model to |mode=%mode active interval time=%activeInterval second&quot;" line172="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line173="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line174="    //% group=&quot;Gyroscope+Accelerometer&quot;" line175="    export function setGyroModel(mode: MODE, activeInterval: number) : void {" line176="        sensor = 2" line177="        if( mode === MODE.Active ) {" line178="            let modeCmd22= &quot;AT+GYMODE=&quot;+activeInterval" line179="            serial.writeString(modeCmd22)" line180="        }" line181="        else {" line182="            serial.writeString(&quot;AT+GYDATA&quot;)" line183="        }" line184="    }" line185="" line186="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line187="    //% group=&quot;Gyroscope+Accelerometer&quot;" line188="    export function queryGyroData() : void {" line189="        sensor = 2" line190="        serial.writeString(&quot;AT+GYDATA&quot;)" line191="    }" line192="" line193="    //% blockId=setPM_T7Model block=&quot;Set PM_T7 Model to |mode=%mode active interval time=%activeInterval second&quot;" line194="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line195="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line196="    //% group=&quot;PM2.5&quot;" line197="    export function setPMT7Model(mode: MODE, activeInterval: number) : void {" line198="        sensor = 3" line199="        if( mode === MODE.Active ) {" line200="            let modeCmd3= &quot;AT+MODE=&quot;+activeInterval" line201="            serial.writeString(modeCmd3)" line202="        }" line203="        else {" line204="            serial.writeString(&quot;AT+DATA&quot;)" line205="        }" line206="    }" line207="" line208="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line209="    //% group=&quot;PM2.5&quot;" line210="    export function queryPMT7Data() : void {" line211="        sensor = 3" line212="        serial.writeString(&quot;AT+DATA&quot;)" line213="    }" line214="" line215="    //% blockId=setSGP30Model block=&quot;Set SGP30 Model to |mode=%mode active interval time=%activeInterval second&quot;" line216="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line217="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line218="    //% group=&quot;SGP30&quot;" line219="    export function setSGP30Model(mode: MODE, activeInterval: number) : void {" line220="        sensor = 4" line221="        if( mode === MODE.Active ) {" line222="            let modeCmd4= &quot;AT+MODE=&quot;+activeInterval" line223="            serial.writeString(modeCmd4)" line224="        }" line225="        else {" line226="            serial.writeString(&quot;AT+DATA&quot;)" line227="        }" line228="    }" line229="    " line230="    //% blockId=querySGP30Data block=&quot;Query SGP30 data&quot; " line231="    //% group=&quot;SGP30&quot;" line232="    export function querySGP30Data() : void {" line233="        sensor = 4" line234="        serial.writeString(&quot;AT+DATA&quot;)" line235="    }" line236="" line237="    //% blockId=setSHT31XModel block=&quot;Set SHT31X Model to |mode=%mode active interval time=%activeInterval second&quot;" line238="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line239="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line240="    //% group=&quot;SHT31X&quot;" line241="    export function setSHTX31Model(mode: MODE, activeInterval: number) : void {" line242="        sensor = 5" line243="        if( mode === MODE.Active ) {" line244="            let modeCmd5= &quot;AT+MODE=&quot;+activeInterval" line245="            serial.writeString(modeCmd5)" line246="        }" line247="        else {" line248="            serial.writeString(&quot;AT+DATA&quot;)" line249="        }" line250="    }" line251="" line252="    //% blockId=querySHT31Data block=&quot;Query SHT31X data&quot; " line253="    //% group=&quot;SHT31X&quot;" line254="    export function querySHT31Data() : void {" line255="        sensor = 5" line256="        serial.writeString(&quot;AT+DATA&quot;)" line257="    }" line258="" line259="    //% block=&quot;Query DHT11 Data pin $dataPin|Wait 2 sec after query $wait&quot;" line260="    //% wait.defl=true" line261="    //% group=&quot;DHT11&quot;" line262="    export function queryDHT11Data(dataPin: DigitalPin, wait: boolean) " line263="    {" line264="        //initialize" line265="        let startTime: number = 0" line266="        let endTime: number = 0" line267="        let checksum: number = 0" line268="        let checksumTmp: number = 0" line269="        let dataArray: boolean[] = []" line270="        let resultArray: number[] = []" line271="        for (let index = 0; index &lt; 40; index++) dataArray.push(false)" line272="        for (let index2 = 0; index2 &lt; 5; index2++) resultArray.push(0)" line273="        dht11_humidity = -999.0" line274="        dht11_temperature = -999.0" line275="        dht11_readSuccessful = false" line276="" line277="        startTime = input.runningTimeMicros()" line278="0" line279="        //request data" line280="        pins.digitalWritePin(dataPin, 0) //begin protocol" line281="        basic.pause(18)" line282="       // pins.setPull(dataPin, PinPullMode.PullUp)" line283="        pins.digitalReadPin(dataPin)" line284="        control.waitMicros(20)" line285="        while (pins.digitalReadPin(dataPin) == 1);" line286="        while (pins.digitalReadPin(dataPin) == 0); //sensor response" line287="        while (pins.digitalReadPin(dataPin) == 1); //sensor response" line288="" line289="        //read data (5 bytes)" line290="        for (let index3 = 0; index3 &lt; 40; index3++) {" line291="            while (pins.digitalReadPin(dataPin) == 1);" line292="            while (pins.digitalReadPin(dataPin) == 0);" line293="            control.waitMicros(28)" line294="            //if sensor pull up data pin for more than 28 us it means 1, otherwise 0" line295="            if (pins.digitalReadPin(dataPin) == 1) dataArray[index3] = true" line296="        }" line297="" line298="        endTime = input.runningTimeMicros()" line299="" line300="        //convert byte number array to integer" line301="        for (let index4 = 0; index4 &lt; 5; index4++)" line302="            for (let index22 = 0; index22 &lt; 8; index22++)" line303="                if (dataArray[8 * index4 + index22]) resultArray[index4] += 2 ** (7 - index22)" line304="" line305="        //verify checksum" line306="        checksumTmp = resultArray[0] + resultArray[1] + resultArray[2] + resultArray[3]" line307="        checksum = resultArray[4]" line308="        if (checksumTmp &gt;= 512) checksumTmp -= 512" line309="        if (checksumTmp &gt;= 256) checksumTmp -= 256" line310="        if (checksum == checksumTmp) dht11_readSuccessful = true" line311="" line312="        //read data if checksum ok" line313="        if (dht11_readSuccessful) {" line314="            dht11_humidity = resultArray[0] + resultArray[1] / 100" line315="            dht11_temperature = resultArray[2] + resultArray[3] / 100" line316="        }" line317="        //wait 2 sec after query if needed" line318="        if (wait) basic.pause(2000)" line319="    }" line320="" line321="    //% blockId=dHT11Humidity block=&quot;Get DHT11 humidity&quot; " line322="    //% group=&quot;DHT11&quot;" line323="    export function dHT11Humidity(): number {" line324="        return dht11_humidity;" line325="    }" line326="    " line327="    //% blockId=dHT11Temperature block=&quot;Get DHT11 temperature&quot; " line328="    //% group=&quot;DHT11&quot;" line329="    export function dHT11Temperature(): number {" line330="        return dht11_temperature;" line331="    }" line332="" line333="    let line = &quot;&quot;" line334="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line335="        line = serial.readLine()       " line336="        switch( sensor ) {" line337="            default:" line338="                break;" line339="            case 1: // MPU6050" line340="            {" line341="                MPU6050_x= parseInt(line.substr(1,5))" line342="                if( line.substr(0,1) === &quot;-&quot;)" line343="                    MPU6050_x *= -1" line344="                MPU6050_y= parseInt(line.substr(7,5))" line345="                if( line.substr(6,1) === &quot;-&quot;)" line346="                    MPU6050_y *= -1" line347="                MPU6050_z= parseInt(line.substr(13,5))" line348="                if( line.substr(12,1) === &quot;-&quot;)" line349="                    MPU6050_z *= -1" line350="            }" line351="                break;" line352="            case 2: // Gyro" line353="            {" line354="                Gyro_x= parseInt(line.substr(1,5))" line355="                if( line.substr(0,1) === &quot;-&quot;)" line356="                    Gyro_x *= -1" line357="                Gyro_y= parseInt(line.substr(7,5))" line358="                if( line.substr(6,1) === &quot;-&quot;)" line359="                    Gyro_y *= -1" line360="                Gyro_z= parseInt(line.substr(13,5))" line361="                if( line.substr(12,1) === &quot;-&quot;)" line362="                    Gyro_z *= -1" line363="            }" line364="                break;" line365="            case 3: // PM_T7" line366="            {" line367="                pm25 = parseInt(line.substr(0,4))" line368="                pm10 = parseInt(line.substr(-4,4))" line369="            }" line370="                break;" line371="            case 4: // SGP30 " line372="            {" line373="                tvoc = parseInt(line.substr(0,5))" line374="                co2 = parseInt(line.substr(-5,5))" line375="            }" line376="                break;" line377="            case 5: // SHT31 " line378="            {" line379="                temperature = parseFloat(line.substr(1,5))" line380="                if(line.substr(0,1) === &quot;-&quot; )" line381="                    temperature *= -1" line382="                humidity = parseFloat(line.substr(-5,5))" line383="" line384="                //basic.showNumber(temperature)" line385="            }" line386="                break;" line387="            case 6: // TOF" line388="            {" line389="                tof_distance = parseInt(line)" line390="            }" line391="            break;" line392="        }" line393="    })" line394="}" numlines="395"></mutation></block></statement></block></xml>