<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="OgrL:14gcc+!`;hPG7TW" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=":~.2Kpm:c{|AHnHdO%c4" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HANSHIN_STEM_SENSORS {" line1="    let buffer = &quot;&quot;" line2="    let sensor=0" line3="    let MPU6050_x=0" line4="    let MPU6050_y=0" line5="    let MPU6050_z=0" line6="    let Gyro_x=0" line7="    let Gyro_y=0" line8="    let Gyro_z=0" line9="    let pm25=0" line10="    let pm10=0" line11="    let tvoc=0" line12="    let co2=0" line13="    let temperature=0.0" line14="    let humidity=0.0" line15="    let dht11_humidity = -999.0" line16="    let dht11_temperature = -999.0" line17="    let dht11_readSuccessful = false" line18="    " line19="    export enum MODE {" line20="        //% blockId=&quot;Active&quot; block=&quot;Active&quot;" line21="        Active=0," line22="        //% blockId=&quot;Passive&quot; block=&quot;Passive&quot;" line23="        Passive=1" line24="    }" line25="" line26="    //% blockId=getMPU6050X block=&quot;Get MPU6050 X&quot; " line27="    export function getMPU6050X() : number {" line28="        return MPU6050_x;" line29="    }" line30="" line31="    //% blockId=getMPU6050Y block=&quot;Get MPU6050 Y&quot; " line32="    export function getMPU6050Y() : number {" line33="        return MPU6050_y;" line34="    }" line35="" line36="    //% blockId=getMPU6050Z block=&quot;Get MPU6050 Z&quot; " line37="    export function getMPU6050Z() : number {" line38="        return MPU6050_z;" line39="    }" line40="" line41="    //% blockId=getGyroX block=&quot;Get Gyro X&quot; " line42="    export function getGyroX() : number {" line43="        return MPU6050_x;" line44="    }" line45="" line46="    //% blockId=getGyroY block=&quot;Get Gyro Y&quot; " line47="    export function getGyroY() : number {" line48="        return MPU6050_y;" line49="    }" line50="" line51="    //% blockId=getGyroZ block=&quot;Get Gyro Z&quot; " line52="    export function getGyroZ() : number {" line53="        return MPU6050_z;" line54="    }" line55="" line56="    //% blockId=getPM25 block=&quot;Get PM25&quot; " line57="    export function getPM25(): number {" line58="        return pm25;" line59="    }" line60="" line61="    //% blockId=getPM10 block=&quot;Get PM10&quot; " line62="    export function getPM10(): number {" line63="        return pm10;" line64="    }" line65="" line66="    //% blockId=getTVOC block=&quot;Get TVOC&quot; " line67="    export function getTVOC(): number {" line68="        return tvoc;" line69="    }" line70="" line71="    //% blockId=getCO2 block=&quot;Get CO2&quot; " line72="    export function getCO2(): number {" line73="        return co2;" line74="    }" line75="" line76="    //% blockId=getTemperature block=&quot;Get temperature&quot; " line77="    export function getTemperature(): number {" line78="        return temperature;" line79="    }" line80="" line81="    //% blockId=getHumidity block=&quot;Get humidity&quot; " line82="    export function getHumidity(): number {" line83="        return humidity;" line84="    }" line85="" line86="    //% blockId=initSerial block=&quot;Init serial port to |TX = %Tx RX=%RX&quot;" line87="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line88="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line89="    export function initSerial(Tx: SerialPin, Rx: SerialPin): void {" line90="        serial.redirect(Tx, Rx, 9600)" line91="        buffer = serial.readString()" line92="        basic.pause(100)" line93="        serial.writeString(&quot;AT&quot;)" line94="        basic.pause(300)" line95="    }" line96="" line97="    //% blockId=setMPU6050Model block=&quot;Set MPU6050 Model to |mode=%mode active interval time=%activeInterval second&quot;" line98="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line99="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line100="    export function setMPU6050Model(mode: MODE, activeInterval: number) : void {" line101="        sensor = 1" line102="        if( mode === MODE.Active ) {" line103="            let modeCmd= &quot;AT+SPMODE=&quot;+activeInterval" line104="            serial.writeString(modeCmd)" line105="        }" line106="        else {" line107="            serial.writeString(&quot;AT+SPDATA&quot;)" line108="        }" line109="    }" line110="" line111="    //% blockId=queryMPU6050Data block=&quot;Query MPU6050 data&quot; " line112="    export function queryMPU6050Data(): void {" line113="        sensor = 1" line114="        serial.writeString(&quot;AT+SPDATA&quot;)" line115="    }" line116="" line117="    //% blockId=setGyroModel block=&quot;Set Gyro Model to |mode=%mode active interval time=%activeInterval second&quot;" line118="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line119="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line120="    export function setGyroModel(mode: MODE, activeInterval: number) : void {" line121="        sensor = 2" line122="        if( mode === MODE.Active ) {" line123="            let modeCmd2= &quot;AT+GYMODE=&quot;+activeInterval" line124="            serial.writeString(modeCmd2)" line125="        }" line126="        else {" line127="            serial.writeString(&quot;AT+GYDATA&quot;)" line128="        }" line129="    }" line130="" line131="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line132="    export function queryGyroData() : void {" line133="        sensor = 2" line134="        serial.writeString(&quot;AT+GYDATA&quot;)" line135="    }" line136="" line137="    //% blockId=setPM_T7Model block=&quot;Set PM_T7 Model to |mode=%mode active interval time=%activeInterval second&quot;" line138="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line139="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line140="    export function setPM_T7Model(mode: MODE, activeInterval: number) : void {" line141="        sensor = 3" line142="        if( mode === MODE.Active ) {" line143="            let modeCmd3= &quot;AT+MODE=&quot;+activeInterval" line144="            serial.writeString(modeCmd3)" line145="        }" line146="        else {" line147="            serial.writeString(&quot;AT+DATA&quot;)" line148="        }" line149="    }" line150="" line151="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line152="    export function queryPM_T7Data() : void {" line153="        sensor = 3" line154="        serial.writeString(&quot;AT+DATA&quot;)" line155="    }" line156="" line157="    //% blockId=setSGP30Model block=&quot;Set SGP30 Model to |mode=%mode active interval time=%activeInterval second&quot;" line158="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line159="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line160="    export function setSGP30Model(mode: MODE, activeInterval: number) : void {" line161="        sensor = 4" line162="        if( mode === MODE.Active ) {" line163="            let modeCmd4= &quot;AT+MODE=&quot;+activeInterval" line164="            serial.writeString(modeCmd4)" line165="        }" line166="        else {" line167="            serial.writeString(&quot;AT+DATA&quot;)" line168="        }" line169="    }" line170="    " line171="    //% blockId=querySGP30Data block=&quot;Query SGP30 data&quot; " line172="    export function querySGP30Data() : void {" line173="        sensor = 4" line174="        serial.writeString(&quot;AT+DATA&quot;)" line175="    }" line176="" line177="    //% blockId=setSHT31Model block=&quot;Set SHT31 Model to |mode=%mode active interval time=%activeInterval second&quot;" line178="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line179="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line180="    export function setSHT31Model(mode: MODE, activeInterval: number) : void {" line181="        sensor = 5" line182="        if( mode === MODE.Active ) {" line183="            let modeCmd5= &quot;AT+MODE=&quot;+activeInterval" line184="            serial.writeString(modeCmd5)" line185="        }" line186="        else {" line187="            serial.writeString(&quot;AT+DATA&quot;)" line188="        }" line189="    }" line190="" line191="    //% blockId=querySHT31Data block=&quot;Query SHT31 data&quot; " line192="    export function querySHT31Data() : void {" line193="        sensor = 5" line194="        serial.writeString(&quot;AT+DATA&quot;)" line195="    }" line196="" line197="    //% block=&quot;Query DHT11 Data pin $dataPin|Wait 2 sec after query $wait&quot;" line198="    //% wait.defl=true" line199="    export function queryDHT11Data(dataPin: DigitalPin, wait: boolean) " line200="    {" line201="        //initialize" line202="        let startTime: number = 0" line203="        let endTime: number = 0" line204="        let checksum: number = 0" line205="        let checksumTmp: number = 0" line206="        let dataArray: boolean[] = []" line207="        let resultArray: number[] = []" line208="        for (let index = 0; index &lt; 40; index++) dataArray.push(false)" line209="        for (let index2 = 0; index2 &lt; 5; index2++) resultArray.push(0)" line210="        dht11_humidity = -999.0" line211="        dht11_temperature = -999.0" line212="        dht11_readSuccessful = false" line213="" line214="        startTime = input.runningTimeMicros()" line215="0" line216="        //request data" line217="        pins.digitalWritePin(dataPin, 0) //begin protocol" line218="        basic.pause(18)" line219="       // pins.setPull(dataPin, PinPullMode.PullUp)" line220="        pins.digitalReadPin(dataPin)" line221="        control.waitMicros(20)" line222="        while (pins.digitalReadPin(dataPin) == 1);" line223="        while (pins.digitalReadPin(dataPin) == 0); //sensor response" line224="        while (pins.digitalReadPin(dataPin) == 1); //sensor response" line225="" line226="        //read data (5 bytes)" line227="        for (let index3 = 0; index3 &lt; 40; index3++) {" line228="            while (pins.digitalReadPin(dataPin) == 1);" line229="            while (pins.digitalReadPin(dataPin) == 0);" line230="            control.waitMicros(28)" line231="            //if sensor pull up data pin for more than 28 us it means 1, otherwise 0" line232="            if (pins.digitalReadPin(dataPin) == 1) dataArray[index3] = true" line233="        }" line234="" line235="        endTime = input.runningTimeMicros()" line236="" line237="        //convert byte number array to integer" line238="        for (let index4 = 0; index4 &lt; 5; index4++)" line239="            for (let index22 = 0; index22 &lt; 8; index22++)" line240="                if (dataArray[8 * index4 + index22]) resultArray[index4] += 2 ** (7 - index22)" line241="" line242="        //verify checksum" line243="        checksumTmp = resultArray[0] + resultArray[1] + resultArray[2] + resultArray[3]" line244="        checksum = resultArray[4]" line245="        if (checksumTmp &gt;= 512) checksumTmp -= 512" line246="        if (checksumTmp &gt;= 256) checksumTmp -= 256" line247="        if (checksum == checksumTmp) dht11_readSuccessful = true" line248="" line249="        //read data if checksum ok" line250="        if (dht11_readSuccessful) {" line251="            dht11_humidity = resultArray[0] + resultArray[1] / 100" line252="            dht11_temperature = resultArray[2] + resultArray[3] / 100" line253="        }" line254="        //wait 2 sec after query if needed" line255="        if (wait) basic.pause(2000)" line256="    }" line257="" line258="    //% blockId=getDHT11Humidity block=&quot;Get DHT11 humidity&quot; " line259="    export function getDHT11Humidity(): number {" line260="        return dht11_humidity;" line261="    }" line262="    " line263="    //% blockId=getDHT11Temperature block=&quot;Get DHT11 temperature&quot; " line264="    export function getDHT11Temperature(): number {" line265="        return dht11_temperature;" line266="    }" line267="" line268="    let line = &quot;&quot;" line269="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line270="        line = serial.readLine()       " line271="        switch( sensor ) {" line272="            default:" line273="                break;" line274="            case 1: // MPU6050" line275="            {" line276="                MPU6050_x= parseInt(line.substr(1,5))" line277="                if( line.substr(0,1) === &quot;-&quot;)" line278="                    MPU6050_x *= -1" line279="                MPU6050_y= parseInt(line.substr(7,5))" line280="                if( line.substr(6,1) === &quot;-&quot;)" line281="                    MPU6050_y *= -1" line282="                MPU6050_z= parseInt(line.substr(13,5))" line283="                if( line.substr(12,1) === &quot;-&quot;)" line284="                    MPU6050_z *= -1" line285="            }" line286="                break;" line287="            case 2: // Gyro" line288="            {" line289="                Gyro_x= parseInt(line.substr(1,5))" line290="                if( line.substr(0,1) === &quot;-&quot;)" line291="                    Gyro_x *= -1" line292="                Gyro_y= parseInt(line.substr(7,5))" line293="                if( line.substr(6,1) === &quot;-&quot;)" line294="                    Gyro_y *= -1" line295="                Gyro_z= parseInt(line.substr(13,5))" line296="                if( line.substr(12,1) === &quot;-&quot;)" line297="                    Gyro_z *= -1" line298="            }" line299="                break;" line300="            case 3: // PM_T7" line301="            {" line302="                pm25 = parseInt(line.substr(0,4))" line303="                pm10 = parseInt(line.substr(-4,4))" line304="            }" line305="                break;" line306="            case 4: // SGP30 " line307="            {" line308="                tvoc = parseInt(line.substr(0,5))" line309="                co2 = parseInt(line.substr(-5,5))" line310="            }" line311="                break;" line312="            case 5: // SHT31 " line313="            {" line314="                temperature = parseFloat(line.substr(1,5))" line315="                if(line.substr(0,1) === &quot;-&quot; )" line316="                    temperature *= -1" line317="                humidity = parseFloat(line.substr(-5,5))" line318="" line319="                //basic.showNumber(temperature)" line320="            }" line321="                break;" line322="        }" line323="    })" line324="}" numlines="325"></mutation></block></statement></block></xml>