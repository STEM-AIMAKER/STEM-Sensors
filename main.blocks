<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Oa5w3[KQB,RYu/t^ToAS" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="GrygY6}nT!oB2R1%5X8(" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HANSHIN_STEM_SENSORS {" line1="    let buffer = &quot;&quot;" line2="    let sensor = 0;" line3="    let MPU6050_x=0" line4="    let MPU6050_y=0" line5="    let MPU6050_z=0" line6="    let Gyro_x=0" line7="    let Gyro_y=0" line8="    let Gyro_z=0" line9="    let pm25=0" line10="    let pm10=0" line11="    let tvoc=0" line12="    let co2=0" line13="    let temperature=0" line14="    let humidity=0" line15="" line16="    enum MODE {" line17="        Active=0," line18="        Passive=1" line19="    }" line20="" line21="    //% blockId=getMPU6050X block=&quot;Get MPU6050 X&quot; " line22="    export function getMPU6050X() : number {" line23="        return MPU6050_x;" line24="    }" line25="" line26="    //% blockId=getMPU6050Y block=&quot;Get MPU6050 Y&quot; " line27="    export function getMPU6050Y() : number {" line28="        return MPU6050_y;" line29="    }" line30="" line31="    //% blockId=getMPU6050Z block=&quot;Get MPU6050 Z&quot; " line32="    export function getMPU6050Z() : number {" line33="        return MPU6050_z;" line34="    }" line35="" line36="    //% blockId=getGyroX block=&quot;Get Gyro X&quot; " line37="    export function getGyroX() : number {" line38="        return MPU6050_x;" line39="    }" line40="" line41="    //% blockId=getGyroY block=&quot;Get Gyro Y&quot; " line42="    export function getGyroY() : number {" line43="        return MPU6050_y;" line44="    }" line45="" line46="    //% blockId=getGyroZ block=&quot;Get Gyro Z&quot; " line47="    export function getGyroZ() : number {" line48="        return MPU6050_z;" line49="    }" line50="" line51="    //% blockId=getPM25 block=&quot;Get PM25&quot; " line52="    export function getPM25(): number {" line53="        return pm25;" line54="    }" line55="" line56="    //% blockId=getPM10 block=&quot;Get PM10&quot; " line57="    export function getPM10(): number {" line58="        return pm10;" line59="    }" line60="" line61="    //% blockId=getTVOC block=&quot;Get TVOC&quot; " line62="    export function getTVOC(): number {" line63="        return tvoc;" line64="    }" line65="" line66="    //% blockId=getCO2 block=&quot;Get CO2&quot; " line67="    export function getCO2(): number {" line68="        return co2;" line69="    }" line70="" line71="    //% blockId=getTemperature block=&quot;Get temperature&quot; " line72="    export function getTemperature(): number {" line73="        return temperature;" line74="    }" line75="" line76="    //% blockId=getHumidity block=&quot;Get humidity&quot; " line77="    export function getHumidity(): number {" line78="        return humidity;" line79="    }" line80="" line81="    //% blockId=initSerial block=&quot;Init serial port to |TX = %Tx RX=%RX&quot;" line82="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line83="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line84="    export function initSerial(Tx: SerialPin, Rx: SerialPin): void {" line85="        serial.redirect(Tx, Rx, 9600)" line86="        buffer = serial.readString()" line87="        basic.pause(100)" line88="        serial.writeString(&quot;AT&quot;)" line89="        basic.pause(100)" line90="    }" line91="" line92="    //% blockId=setMPU6050Model block=&quot;Set MPU6050 Model to |mode=%mode active interval time=%activeInterval second&quot;" line93="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line94="    export function setMPU6050Model(mode: MODE, activeInterval: number) : void {" line95="        sensor = 1" line96="        if( mode === MODE.Active ) {" line97="            let modeCmd= &quot;ATSPMODE=&quot;+activeInterval" line98="            serial.writeString(modeCmd)" line99="        }" line100="        else {" line101="            serial.writeString(&quot;ATSPDATA&quot;)" line102="        }" line103="    }" line104="" line105="    //% blockId=queryMPU6050Data block=&quot;Query MPU6050 data&quot; " line106="    export function queryMPU6050Data(): void {" line107="        sensor = 1" line108="        serial.writeString(&quot;ATSPDATA&quot;)" line109="    }" line110="" line111="    //% blockId=setGyroModel block=&quot;Set Gyro Model to |mode=%mode active interval time=%activeInterval second&quot;" line112="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line113="    export function setGyroModel(mode: MODE, activeInterval: number) : void {" line114="        sensor = 2" line115="        if( mode === MODE.Active ) {" line116="            let modeCmd2= &quot;ATGYMODE=&quot;+activeInterval" line117="            serial.writeString(modeCmd2)" line118="        }" line119="        else {" line120="            serial.writeString(&quot;ATGYDATA&quot;)" line121="        }" line122="    }" line123="" line124="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line125="    export function queryGyroData() : void {" line126="        sensor = 2" line127="        serial.writeString(&quot;ATGYDATA&quot;)" line128="    }" line129="" line130="    //% blockId=setPM_T7Model block=&quot;Set PM_T7 Model to |mode=%mode active interval time=%activeInterval second&quot;" line131="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line132="    export function setPM_T7Model(mode: MODE, activeInterval: number) : void {" line133="        sensor = 3" line134="        if( mode === MODE.Active ) {" line135="            let modeCmd3= &quot;ATMODE=&quot;+activeInterval" line136="            serial.writeString(modeCmd3)" line137="        }" line138="        else {" line139="            serial.writeString(&quot;ATDATA&quot;)" line140="        }" line141="    }" line142="" line143="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line144="    export function queryPM_T7Data() : void {" line145="        sensor = 3" line146="        serial.writeString(&quot;ATDATA&quot;)" line147="    }" line148="" line149="    //% blockId=setSGP30Model block=&quot;Set SGP30 Model to |mode=%mode active interval time=%activeInterval second&quot;" line150="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line151="    export function setSGP30Model(mode: MODE, activeInterval: number) : void {" line152="        sensor = 4" line153="        if( mode === MODE.Active ) {" line154="            let modeCmd4= &quot;ATMODE=&quot;+activeInterval" line155="            serial.writeString(modeCmd4)" line156="        }" line157="        else {" line158="            serial.writeString(&quot;ATDATA&quot;)" line159="        }" line160="    }" line161="    " line162="    //% blockId=querySGP30Data block=&quot;Query SGP30 data&quot; " line163="    export function querySGP30Data() : void {" line164="        sensor = 4" line165="        serial.writeString(&quot;ATDATA&quot;)" line166="    }" line167="" line168="    //% blockId=setSHT31Model block=&quot;Set SHT31 Model to |mode=%mode active interval time=%activeInterval second&quot;" line169="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line170="    export function setSHT31Model(mode: MODE, activeInterval: number) : void {" line171="        sensor = 5" line172="        if( mode === MODE.Active ) {" line173="            let modeCmd5= &quot;ATMODE=&quot;+activeInterval" line174="            serial.writeString(modeCmd5)" line175="        }" line176="        else {" line177="            serial.writeString(&quot;ATDATA&quot;)" line178="        }" line179="    }" line180="" line181="    //% blockId=querySHT31Data block=&quot;Query SHT31 data&quot; " line182="    export function querySHT31Data() : void {" line183="        sensor = 5" line184="        serial.writeString(&quot;ATDATA&quot;)" line185="    }" line186=" " line187="}" numlines="188"></mutation></block></statement></block></xml>