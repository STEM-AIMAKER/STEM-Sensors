<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Rz]uCQ}sN5(}{9C1Jh37" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="W+Lf5U2]Vgd$P[*9#ow{" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace HANSHIN_STEM_SENSORS {" line1="    let buffer = &quot;&quot;" line2="    let sensor = 0;" line3="    let MPU6050_x=0" line4="    let MPU6050_y=0" line5="    let MPU6050_z=0" line6="    let Gyro_x=0" line7="    let Gyro_y=0" line8="    let Gyro_z=0" line9="    let pm25=0" line10="    let pm10=0" line11="    let tvoc=0" line12="    let co2=0" line13="    let temperature=0.0" line14="    let humidity=0.0" line15="" line16="    enum MODE {" line17="        //% blockId=&quot;Active&quot; block=&quot;Active&quot;" line18="        Active=0," line19="        //% blockId=&quot;Passive&quot; block=&quot;Passive&quot;" line20="        Passive=1" line21="    }" line22="" line23="    //% blockId=getMPU6050X block=&quot;Get MPU6050 X&quot; " line24="    export function getMPU6050X() : number {" line25="        return MPU6050_x;" line26="    }" line27="" line28="    //% blockId=getMPU6050Y block=&quot;Get MPU6050 Y&quot; " line29="    export function getMPU6050Y() : number {" line30="        return MPU6050_y;" line31="    }" line32="" line33="    //% blockId=getMPU6050Z block=&quot;Get MPU6050 Z&quot; " line34="    export function getMPU6050Z() : number {" line35="        return MPU6050_z;" line36="    }" line37="" line38="    //% blockId=getGyroX block=&quot;Get Gyro X&quot; " line39="    export function getGyroX() : number {" line40="        return MPU6050_x;" line41="    }" line42="" line43="    //% blockId=getGyroY block=&quot;Get Gyro Y&quot; " line44="    export function getGyroY() : number {" line45="        return MPU6050_y;" line46="    }" line47="" line48="    //% blockId=getGyroZ block=&quot;Get Gyro Z&quot; " line49="    export function getGyroZ() : number {" line50="        return MPU6050_z;" line51="    }" line52="" line53="    //% blockId=getPM25 block=&quot;Get PM25&quot; " line54="    export function getPM25(): number {" line55="        return pm25;" line56="    }" line57="" line58="    //% blockId=getPM10 block=&quot;Get PM10&quot; " line59="    export function getPM10(): number {" line60="        return pm10;" line61="    }" line62="" line63="    //% blockId=getTVOC block=&quot;Get TVOC&quot; " line64="    export function getTVOC(): number {" line65="        return tvoc;" line66="    }" line67="" line68="    //% blockId=getCO2 block=&quot;Get CO2&quot; " line69="    export function getCO2(): number {" line70="        return co2;" line71="    }" line72="" line73="    //% blockId=getTemperature block=&quot;Get temperature&quot; " line74="    export function getTemperature(): number {" line75="        return temperature;" line76="    }" line77="" line78="    //% blockId=getHumidity block=&quot;Get humidity&quot; " line79="    export function getHumidity(): number {" line80="        return humidity;" line81="    }" line82="" line83="    //% blockId=initSerial block=&quot;Init serial port to |TX = %Tx RX=%RX&quot;" line84="    //% Tx.fieldEditor=&quot;gridpicker&quot; Tx.fieldOptions.columns=4" line85="    //% Rx.fieldEditor=&quot;gridpicker&quot; Rx.fieldOptions.columns=4" line86="    export function initSerial(Tx: SerialPin, Rx: SerialPin): void {" line87="        serial.redirect(Tx, Rx, 9600)" line88="        buffer = serial.readString()" line89="        basic.pause(100)" line90="        serial.writeString(&quot;AT&quot;)" line91="        basic.pause(100)" line92="    }" line93="" line94="    //% blockId=setMPU6050Model block=&quot;Set MPU6050 Model to |mode=%mode active interval time=%activeInterval second&quot;" line95="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line96="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line97="    export function setMPU6050Model(mode: MODE, activeInterval: number) : void {" line98="        sensor = 1" line99="        if( mode === MODE.Active ) {" line100="            let modeCmd= &quot;AT+SPMODE=&quot;+activeInterval" line101="            serial.writeString(modeCmd)" line102="        }" line103="        else {" line104="            serial.writeString(&quot;AT+SPDATA&quot;)" line105="        }" line106="    }" line107="" line108="    //% blockId=queryMPU6050Data block=&quot;Query MPU6050 data&quot; " line109="    export function queryMPU6050Data(): void {" line110="        sensor = 1" line111="        serial.writeString(&quot;AT+SPDATA&quot;)" line112="    }" line113="" line114="    //% blockId=setGyroModel block=&quot;Set Gyro Model to |mode=%mode active interval time=%activeInterval second&quot;" line115="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line116="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line117="    export function setGyroModel(mode: MODE, activeInterval: number) : void {" line118="        sensor = 2" line119="        if( mode === MODE.Active ) {" line120="            let modeCmd2= &quot;AT+GYMODE=&quot;+activeInterval" line121="            serial.writeString(modeCmd2)" line122="        }" line123="        else {" line124="            serial.writeString(&quot;AT+GYDATA&quot;)" line125="        }" line126="    }" line127="" line128="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line129="    export function queryGyroData() : void {" line130="        sensor = 2" line131="        serial.writeString(&quot;AT+GYDATA&quot;)" line132="    }" line133="" line134="    //% blockId=setPM_T7Model block=&quot;Set PM_T7 Model to |mode=%mode active interval time=%activeInterval second&quot;" line135="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line136="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line137="    export function setPM_T7Model(mode: MODE, activeInterval: number) : void {" line138="        sensor = 3" line139="        if( mode === MODE.Active ) {" line140="            let modeCmd3= &quot;AT+MODE=&quot;+activeInterval" line141="            serial.writeString(modeCmd3)" line142="        }" line143="        else {" line144="            serial.writeString(&quot;AT+DATA&quot;)" line145="        }" line146="    }" line147="" line148="    //% blockId=queryGyroData block=&quot;Query gyro data&quot; " line149="    export function queryPM_T7Data() : void {" line150="        sensor = 3" line151="        serial.writeString(&quot;AT+DATA&quot;)" line152="    }" line153="" line154="    //% blockId=setSGP30Model block=&quot;Set SGP30 Model to |mode=%mode active interval time=%activeInterval second&quot;" line155="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line156="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line157="    export function setSGP30Model(mode: MODE, activeInterval: number) : void {" line158="        sensor = 4" line159="        if( mode === MODE.Active ) {" line160="            let modeCmd4= &quot;AT+MODE=&quot;+activeInterval" line161="            serial.writeString(modeCmd4)" line162="        }" line163="        else {" line164="            serial.writeString(&quot;AT+DATA&quot;)" line165="        }" line166="    }" line167="    " line168="    //% blockId=querySGP30Data block=&quot;Query SGP30 data&quot; " line169="    export function querySGP30Data() : void {" line170="        sensor = 4" line171="        serial.writeString(&quot;AT+DATA&quot;)" line172="    }" line173="" line174="    //% blockId=setSHT31Model block=&quot;Set SHT31 Model to |mode=%mode active interval time=%activeInterval second&quot;" line175="    //% mode.fieldEditor=&quot;gridpicker&quot; mode.fieldOptions.columns=1" line176="    //% activeInterval.min=1 activeInterval.max=9 activeInterval.defl=5" line177="    export function setSHT31Model(mode: MODE, activeInterval: number) : void {" line178="        sensor = 5" line179="        if( mode === MODE.Active ) {" line180="            let modeCmd5= &quot;AT+MODE=&quot;+activeInterval" line181="            serial.writeString(modeCmd5)" line182="        }" line183="        else {" line184="            serial.writeString(&quot;AT+DATA&quot;)" line185="        }" line186="    }" line187="" line188="    //% blockId=querySHT31Data block=&quot;Query SHT31 data&quot; " line189="    export function querySHT31Data() : void {" line190="        sensor = 5" line191="        serial.writeString(&quot;AT+DATA&quot;)" line192="    }" line193=" " line194="    let line = &quot;&quot;" line195="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line196="        line = serial.readLine()" line197="        //basic.showString(line +&quot;#&quot;)" line198="        switch( sensor ) {" line199="            default:" line200="                break;" line201="            case 1: // MPU6050" line202="            {" line203="                MPU6050_x= parseInt(line.substr(1,5).trim())" line204="                if( line.substr(0,1) === &quot;-&quot;)" line205="                    MPU6050_x *= -1" line206="                MPU6050_y= parseInt(line.substr(7,5).trim())" line207="                if( line.substr(6,1) === &quot;-&quot;)" line208="                    MPU6050_y *= -1" line209="                MPU6050_z= parseInt(line.substr(13,5).trim())" line210="                if( line.substr(12,1) === &quot;-&quot;)" line211="                    MPU6050_z *= -1" line212="            }" line213="                break;" line214="            case 2: // Gyro" line215="            {" line216="                Gyro_x= parseInt(line.substr(1,5).trim())" line217="                if( line.substr(0,1) === &quot;-&quot;)" line218="                    Gyro_x *= -1" line219="                Gyro_y= parseInt(line.substr(7,5).trim())" line220="                if( line.substr(6,1) === &quot;-&quot;)" line221="                    Gyro_y *= -1" line222="                Gyro_z= parseInt(line.substr(13,5).trim())" line223="                if( line.substr(12,1) === &quot;-&quot;)" line224="                    Gyro_z *= -1" line225="            }" line226="                break;" line227="            case 3: // PM_T7" line228="            {" line229="                pm25 = parseInt(line.substr(0,4).trim())" line230="                pm10 = parseInt(line.substr(-4,4).trim())" line231="            }" line232="                break;" line233="            case 4: // SGP30" line234="            {" line235="                tvoc = parseInt(line.substr(0,5).trim())" line236="                co2 = parseInt(line.substr(-5,5).trim())" line237="            }" line238="                break;" line239="            case 5: // SHT31 " line240="            {" line241="                temperature = parseFloat(line.substr(1,5).trim())" line242="                if(line.substr(0,1) === &quot;-&quot; )" line243="                    temperature *= -1" line244="                humidity = parseFloat(line.substr(-5,5).trim())" line245="            }" line246="                break;" line247="        }" line248="    })" line249="}" numlines="250"></mutation></block></statement></block></xml>